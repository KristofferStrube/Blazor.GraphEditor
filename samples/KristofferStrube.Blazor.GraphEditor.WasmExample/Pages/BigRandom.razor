@page "/BigRandom"
@implements IDisposable
@using KristofferStrube.Blazor.GraphEditor
@using System.Text;

<PageTitle>Blazor.GraphEditor - Big Random</PageTitle>

<h1>Big Random Graph</h1>

<div style="height:80vh;">
    <GraphEditor @ref=GraphEditor
                 TNode="Page"
                 TEdge="Transition"
                 NodeIdMapper="n => n.id"
                 NodeRadiusMapper="n => n.size"
                 NodeRepulsionMapper="n => n.repulsion"
                 NodeColorMapper="n => n.color"
                 EdgeFromMapper="e => e.from"
                 EdgeToMapper="e => e.to"
                 EdgeWidthMapper="e => e.weight*5"
                 EdgeSpringConstantMapper="e => e.weight"
                 EdgeSpringLengthMapper="e => e.length" />
</div>

@code {
    private GraphEditor.GraphEditor<Page, Transition> GraphEditor = default!;
    private bool running = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        List<Page> pages = Enumerable
            .Range(0, 25)
            .Select(i => new Page(i.ToString(), RandomColor(), 50 + Random.Shared.Next(50), 2000 + Random.Shared.Next(2000)))
            .ToList();

        List<Transition> transitions = new(25);
        transitions.Add(new Transition(pages[0], pages[1], Random.Shared.NextDouble() * 2, 200 + Random.Shared.Next(300)));

        for (int i = 1; i < 25; i++)
        {
            transitions.Add(new Transition(pages[i], transitions[Random.Shared.Next(i)].from, Random.Shared.NextDouble() * 2, 200 + Random.Shared.Next(300)));
        }

        for (int i = 0; i < 3; i++)
        {
            transitions.Add(new Transition(pages[Random.Shared.Next(25)], pages[Random.Shared.Next(25)], Random.Shared.NextDouble() * 2, 200 + Random.Shared.Next(300)));
        }
        transitions = transitions.DistinctBy(t => t.from + "-" + t.to).ToList();

        await GraphEditor.LoadGraph(pages, transitions);

        while (running)
        {
            await GraphEditor.ForceDirectedLayout();
            await Task.Delay(1);
        }
    }

    public string RandomColor()
    {
        float red = 0;
        float green = 0;
        float blue = 0;

        while (Math.Abs(blue - green) + Math.Abs(blue - red) + Math.Abs(red - green) < 200)
        {
            red = Random.Shared.Next(0, 150);
            green = Random.Shared.Next(0, 150);
            blue = 225 - red - green;
        }
        if (blue > 150)
        {
            blue = 150;
        }

        return $"#{(int)(50 + red):X2}{(int)(50 + green):X2}{(int)(50 + blue):X2}";
    }

    public record Page(string id, string color = "#66BB6A", double size = 50, double repulsion = 800);
    public record Transition(Page from, Page to, double weight, double length = 200);

    public void Dispose()
    {
        running = false;
    }
}
