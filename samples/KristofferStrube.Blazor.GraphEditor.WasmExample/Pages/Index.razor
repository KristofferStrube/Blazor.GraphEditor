@page "/"
@implements IDisposable
@using KristofferStrube.Blazor.GraphEditor

<PageTitle>Blazor.GraphEditor</PageTitle>

<h1>Force Directed Layout</h1>

<div style="height:80vh;">
    <GraphEditor 
        @ref=GraphEditor
        TNode="Page"
        TEdge="Transition"
        NodeIdMapper="n => n.id"
        NodeRadiusMapper="n => n.size"
        NodeColorMapper="n => n.color"
        EdgeFromMapper="e => e.from"
        EdgeToMapper="e => e.to"
        EdgeWidthMapper="e => e.weight*5"
        EdgeSpringConstantMapper="e => e.weight"
        EdgeSpringLengthMapper="e => e.length"
        />
</div>

@code {
    private GraphEditor.GraphEditor<Page, Transition> GraphEditor = default!;
    private bool running = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        while (!GraphEditor.IsReadyToLoad)
        {
            await Task.Delay(50);
        }

        var pages = new List<Page>() { new("1", size: 60), new("2", "#3333AA"), new("3", "#AA33AA"), new("4", "#AA3333"), new("5", "#AAAA33"), new("6", "#33AAAA"), new("7"), new("8") };

        var edges = new List<Transition>() {
            new(pages[0], pages[1], 1),
            new(pages[0], pages[2], 1),
            new(pages[0], pages[3], 1),
            new(pages[0], pages[4], 1),
            new(pages[0], pages[5], 1),
            new(pages[0], pages[6], 1),
            new(pages[6], pages[7], 2, 150) };

        await GraphEditor.LoadGraph(pages, edges);

        DateTimeOffset startTime = DateTimeOffset.UtcNow;
        while (running)
        {
            await GraphEditor.ForceDirectedLayout();
            /// First 5 seconds also fit the viewport to all the nodes and edges in the graph.
            if (DateTimeOffset.UtcNow - startTime < TimeSpan.FromSeconds(5))
                GraphEditor.SVGEditor.FitViewportToAllShapes(delta: 0.8);
            await Task.Delay(1);
        }
    }

    public record Page(string id, string color = "#66BB6A", float size = 50);
    public record Transition(Page from, Page to, float weight, float length = 200);

    public void Dispose()
    {
        running = false;
    }
}