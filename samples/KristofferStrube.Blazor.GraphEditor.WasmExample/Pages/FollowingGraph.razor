@page "/FollowingGraph/"
@implements IDisposable
@inject HttpClient httpClient
@using KristofferStrube.ActivityStreams
@using KristofferStrube.Blazor.GraphEditor

<PageTitle>Blazor.GraphEditor - Following Graph</PageTitle>

<h1>Following Graph</h1>

<p>
    The following shows a following graph for @@kristofferstrube@@hachyderm.io<br />

    @if (selectedUser is null)
    {
        <text>Select a node to show what user that is.</text>
    }
    else
    {
        <text>
            Selected user: <b>@selectedUser.Id</b>
            &nbsp;
            <button class="btn btn-primary" @onclick="Expand">Expand with their followings</button>
            &nbsp; <small>(We only show 50 followings for each user)</small>
        </text>
    }
</p>


<div style="height:75vh;">
    <GraphEditor @ref=GraphEditor
                 TNode="User"
                 TEdge="Follow"
                 NodeIdMapper="n => n.Id"
                 NodeRadiusMapper="n => n.Size"
                 NodeColorMapper="n => n.Color"
                 NodeImageMapper="n => n.Image"
                 NodeRepulsionMapper="_ => 1200"
                 EdgeSpringConstantMapper="_ => 0.8"
                 EdgeSpringLengthMapper="e => e.EdgeLength"
                 EdgeFromMapper="e => e.From"
                 EdgeToMapper="e => e.To"
                 EdgeWidthMapper="_ => 5"
                 NodeSelectionCallback="async (user) => { selectedUser = user; await InvokeAsync(StateHasChanged); }" />
</div>

@code {
    private GraphEditor.GraphEditor<User, Follow> GraphEditor = default!;
    private bool running = true;
    private string? error;
    private User? selectedUser;
    List<Follow> edges = [];
    List<User> users = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        while (!GraphEditor.IsReadyToLoad)
        {
            await Task.Delay(50);
        }

        string primaryUserId = "@kristofferstrube@hachyderm.io";

        User primaryUser = new(primaryUserId, "#70f070", size: 50);
        await GetImageForUser(primaryUser);
        users.Add(primaryUser);

        await AddMoreUsers(primaryUser, 30);

        await GraphEditor.LoadGraph(users, edges);

        double prevUnixTimeSeconds = DateTimeOffset.Now.ToUnixTimeMilliseconds() / 1000.0;
        double startUnixTimeSeconds = prevUnixTimeSeconds;
        while (running)
        {
            await GraphEditor.ForceDirectedLayout();
            double unixTimeSeconds = DateTimeOffset.Now.ToUnixTimeMilliseconds() / 1000.0;
            if (unixTimeSeconds - startUnixTimeSeconds < 7)
            {
                GraphEditor.SVGEditor.FitViewportToAllShapes(delta: Math.Min((unixTimeSeconds - prevUnixTimeSeconds) * 2, 1), padding: 100);
                prevUnixTimeSeconds = unixTimeSeconds;
            }
            await Task.Delay(1);
        }
    }

    public async Task Expand()
    {
        await AddMoreUsers(selectedUser!, 20);
        await GraphEditor.UpdateGraph(users, edges);
        GraphEditor.MoveEdgesToBack();
    }

    private async Task AddMoreUsers(User fromUser, int size)
    {
        selectedUser = null;
        StateHasChanged();

        var response = await httpClient.GetAsync($"https://kristoffer-strube.dk/API/mastodon/Following/{fromUser.Id}");

        if (!response.IsSuccessStatusCode)
        {
            error = await response.Content.ReadAsStringAsync();
            return;
        }

        var followingUrls = await response.Content.ReadFromJsonAsync<string[]>();
        var following = followingUrls!
            .Select(url => url.Length > 12 && url[8..].Split("/users/") is { Length: 2 } parts ? parts : null)
            .Where(parts => parts is not null)
            .Select(parts => new User($"@{parts[1]}@{parts[0]}", "#7070f0", size: size))
            .OrderByDescending(u => users.Any(existing => existing.Equals(u)) ? 1 : 0)
            .Take(50)
            .ToList();
        var allNewUsers = following.Where(f => !users.Any(u => u.Equals(f))).ToList();

        users = [.. users, .. allNewUsers];

        // Increase distance to this user to make room for new neighbors.
        foreach (var edge in edges.Where(e => e.To.Equals(fromUser) || e.From.Equals(fromUser)))
        {
            edge.EdgeLength = 500;
        }

        foreach (var follow in following)
        {
            var newEdge = new Follow(fromUser, follow);
            if (!edges.Any(e => e.Equals(newEdge)))
            {
                edges.Add(newEdge);
            }
        }

        Task.WhenAll(allNewUsers.Select(GetImageForUser));
    }

    public async Task GetImageForUser(User user)
    {
        var response = await httpClient.GetAsync($"https://kristoffer-strube.dk/API/mastodon/Profile/{user.Id}");

        if (!response.IsSuccessStatusCode)
            return;

        Person? person = await response.Content.ReadFromJsonAsync<Person>();

        user.Image = person?.Icon?.FirstOrDefault() is Image { } image ? image.Url.FirstOrDefault()?.Href?.ToString() : null;
    }

    public class User(string id, string color, float size = 30) : IEquatable<User>
    {
        public string Id = id;
        public string Color = color;
        public float Size = size;

        public string? Image { get; set; }

        public override bool Equals(object? obj) => obj is User user && Equals(user);

        public bool Equals(User? other) => other?.Id == Id;

        public override int GetHashCode() => Id.GetHashCode();
    }
    public class Follow(User from, User to) : IEquatable<Follow>
    {
        public User From => from;
        public User To => to;

        public float EdgeLength { get; set; } = 250;

        public bool Equals(Follow? other) => other is not null && other.From.Equals(From) && other.To.Equals(To);
    }

    public void Dispose()
    {
        running = false;
    }
}