@page "/SelectCallback"
@implements IDisposable
@using KristofferStrube.Blazor.GraphEditor

<PageTitle>Blazor.GraphEditor - Select Callback</PageTitle>

<h1>Select Callback</h1>

@if (selectPage is null)
{
    <p>On this page you can select a node to get information about it using callbacks.</p>
}
else
{
    <p>You selected the node with id: <code>@selectPage.id</code> which has the following description: <i>@selectPage.description</i></p>
}

<div style="height:70vh;">
    <GraphEditor 
        @ref=GraphEditor
        TNode="Page"
        TEdge="Transition"
        NodeIdMapper="n => n.id"
        NodeRadiusMapper="n => n.size"
        NodeColorMapper="n => n.color"
        EdgeFromMapper="e => e.from"
        EdgeToMapper="e => e.to"
        EdgeWidthMapper="e => e.weight*5"
        EdgeSpringConstantMapper="e => e.weight"
        EdgeSpringLengthMapper="e => e.length"
        NodeRepulsionMapper="n => 10_000"
        NodeSelectionCallback="(page) => { selectPage = page; StateHasChanged(); return Task.CompletedTask; }"
        />
</div>

@code {
    private GraphEditor.GraphEditor<Page, Transition> GraphEditor = default!;
    private bool running = true;
    private Page? selectPage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        while (!GraphEditor.IsReadyToLoad)
        {
            await Task.Delay(50);
        }

        var pages = new List<Page>() { new("1", "First nodes description."), new("2", "Second nodes description."), new("3", "Third nodes description."), new("4", "Fourth nodes description.") };

        var edges = new List<Transition>() { new(pages[0], pages[1], 1), new(pages[1], pages[2], 1), new(pages[2], pages[3], 1), new(pages[3], pages[0], 1) };

        await GraphEditor.LoadGraph(pages, edges);

        double prevUnixTimeSeconds = DateTimeOffset.Now.ToUnixTimeMilliseconds() / 1000.0;
        double startUnixTimeSeconds = prevUnixTimeSeconds;
        while (running)
        {
            await GraphEditor.ForceDirectedLayout();
            double unixTimeSeconds = DateTimeOffset.Now.ToUnixTimeMilliseconds() / 1000.0;
            if (unixTimeSeconds - startUnixTimeSeconds < 3)
            {
                GraphEditor.SVGEditor.FitViewportToAllShapes(delta: Math.Min((unixTimeSeconds - prevUnixTimeSeconds) * 2, 1), padding: 50);
                prevUnixTimeSeconds = unixTimeSeconds;
            }
            await Task.Delay(1);
        }
    }

    public record Page(string id, string description, string color = "#66BB6A", float size = 50);
    public record Transition(Page from, Page to, float weight, float length = 200);

    public void Dispose()
    {
        running = false;
    }
}