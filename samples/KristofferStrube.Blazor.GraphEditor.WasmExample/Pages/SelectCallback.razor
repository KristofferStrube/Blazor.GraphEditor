@page "/SelectCallback"
@implements IDisposable
@using KristofferStrube.Blazor.GraphEditor

<PageTitle>Blazor.GraphEditor - Select Callback</PageTitle>

<h1>Select Callback</h1>

@if (selectNode is null)
{
    <p>On this page you can select a node to get information about it using callbacks.</p>
}
else
{
    <p>You selected the node with id: <code>@selectNode</code></p>
}

<div style="height:70vh;">
    <GraphEditor 
        @ref=GraphEditor
        TNode="Page"
        TEdge="Transition"
        NodeIdMapper="n => n.id"
        NodeRadiusMapper="n => n.size"
        NodeColorMapper="n => n.color"
        EdgeFromMapper="e => e.from"
        EdgeToMapper="e => e.to"
        EdgeWidthMapper="e => e.weight*5"
        EdgeSpringConstantMapper="e => e.weight"
        EdgeSpringLengthMapper="e => e.length"
        NodeSelectionCallback="(page) => { selectNode = page.id; StateHasChanged(); return Task.CompletedTask; }"
        />
</div>

@code {
    private GraphEditor.GraphEditor<Page, Transition> GraphEditor = default!;
    private bool running = true;
    private string? selectNode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await GraphEditor.LoadGraph(
            new List<Page>() { new("1"), new("2"), new("3"), new("4") },
            new List<Transition>() { new("1", "2", 1), new("1", "3", 1), new("1", "4", 1) }
        );

        while (running)
        {
            await GraphEditor.ForceDirectedLayout();
            await Task.Delay(1);
        }
    }

    public record Page(string id, string color = "#66BB6A", float size = 50);
    public record Transition(string from, string to, float weight, float length = 200);

    public void Dispose()
    {
        running = false;
    }
}