@page "/LiveData"
@implements IDisposable
@using KristofferStrube.Blazor.GraphEditor

<PageTitle>Blazor.GraphEditor - Live Data</PageTitle>

<h1>Live Data</h1>

<p>On this page we can animate some of the details of the nodes in the graph while we run the force directed layout.</p>

<button class="btn btn-success" @onclick="AddNode">Add Node</button>

<div style="height:70vh;">
    <GraphEditor @ref=GraphEditor
                 TNode="Page"
                 TEdge="Transition"
                 NodeIdMapper="n => n.id"
                 NodeColorMapper=ColorMapper
                 NodeRepulsionMapper="_ => 4000"
                 EdgeFromMapper="e => e.from"
                 EdgeToMapper="e => e.to"
                 EdgeWidthMapper="e => e.weight*5"
                 EdgeSpringConstantMapper="e => e.weight"
                 EdgeSpringLengthMapper="e => e.length" />
</div>

@code {
    private List<Page> pages = new();
    private List<Transition> transitions = new();

    private GraphEditor.GraphEditor<Page, Transition> GraphEditor = default!;
    private bool running = true;

    private double edgeLengthSinAngle = 0;
    int nodeCount = 8;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;


        pages = Enumerable.Range(0, nodeCount).Select(i => new Page(i.ToString()) { BaseOffset = i * Math.PI * 2 / nodeCount }).ToList();
        transitions = Enumerable.Range(0, nodeCount).Select(i => new Transition(pages[i % nodeCount], pages[(i + 1) % nodeCount], 1)).ToList();

        await GraphEditor.LoadGraph(pages, transitions);

        while (running)
        {
            double unixTimeSeconds = DateTimeOffset.Now.ToUnixTimeMilliseconds() / 1000.0;
            edgeLengthSinAngle = unixTimeSeconds % Math.PI * 2;
            pages.ForEach(p =>
            {
                p.Radians = p.BaseOffset + unixTimeSeconds % (Math.PI * 2);
            });
            await GraphEditor.ForceDirectedLayout();
            await Task.Delay(1);
        }
    }

    string ColorMapper(Page page)
    {
        var red = $"{(int)(Math.Sin(page.Radians) * 100 + 150):X2}";
        var green = $"{(int)(Math.Sin(page.Radians + Math.PI * 2 / 3) * 100 + 150):X2}";
        var blue = $"{(int)(Math.Sin(page.Radians + Math.PI * 2 / 3 * 2) * 100 + 150):X2}";
        return $"#{red}{green}{blue}";
    }


    public async Task AddNode()
    {
        pages.Add(new Page(nodeCount++.ToString()) { BaseOffset = DateTimeOffset.Now.ToUnixTimeMilliseconds() / 1000.0 });
        transitions.Add(new Transition(pages[^2], pages[^1], 1, 200));
        await GraphEditor.UpdateGraph(pages, transitions);
    }

    double EdgeLengthMapper(Transition edge) => edge.length * (1.5 + Math.Sin(edgeLengthSinAngle) / 2);

    public record Page(string id)
    {
        public double BaseOffset { get; set; }
        public double Radians { get; set; }
    }
    public record Transition(Page from, Page to, float weight, float length = 100);

    public void Dispose()
    {
        running = false;
    }
}