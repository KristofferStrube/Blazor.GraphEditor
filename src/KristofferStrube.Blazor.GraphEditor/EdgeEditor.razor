@using BlazorContextMenu
@using KristofferStrube.Blazor.SVGEditor.Extensions;
@using KristofferStrube.Blazor.SVGEditor.ShapeEditors;
@using KristofferStrube.Blazor.SVGEditor;
@using Microsoft.AspNetCore.Components.Web

@typeparam TNodeData where TNodeData : IEquatable<TNodeData>
@typeparam TEdgeData
@inherits ShapeEditor<Edge<TNodeData, TEdgeData>>

<ContextMenuTrigger @key=SVGElement.Id MenuId="SVGMenu" WrapperTag="g" Data=@SVGElement MouseButtonTrigger="SVGElement.ShouldTriggerContextMenu ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
    <g style="@(SVGElement.SVG.EditMode is EditMode.Add ? "pointer-events:none;" : "")" transform="translate(@SVGElement.SVG.Translate.x.AsString() @SVGElement.SVG.Translate.y.AsString()) scale(@SVGElement.SVG.Scale.AsString())">
        <line @ref=ElementReference
              @onfocusin="FocusElement"
              @onfocusout="UnfocusElement"
              @onpointerdown="SelectAsync"
              @onkeyup="KeyUp"
              tabindex="@(SVGElement.IsChildElement ? -1 : 0)"
              x1=@SVGElement.X1.AsString()
              y1=@SVGElement.Y1.AsString()
              x2=@SVGElement.X2.AsString()
              y2=@SVGElement.Y2.AsString()
              stroke="@SVGElement.Stroke"
              stroke-width="@SVGElement.StrokeWidth"
              stroke-linecap="@SVGElement.StrokeLinecap.AsString()"
              stroke-linejoin="@SVGElement.StrokeLinejoin.AsString()"
              stroke-dasharray="@SVGElement.StrokeDasharray"
              stroke-dashoffset="@SVGElement.StrokeDashoffset.AsString()"
              fill="@SVGElement.Fill"
              marker-end=@(SVGElement.X1 != SVGElement.X2 && SVGElement.Y1 != SVGElement.Y2 ? "url(#arrow)" : "")>
        </line>
    </g>
</ContextMenuTrigger>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SVGElement.UpdateLine();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}