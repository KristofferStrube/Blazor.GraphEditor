﻿@using BlazorContextMenu
@using KristofferStrube.Blazor.SVGEditor.ShapeEditors
@using KristofferStrube.Blazor.SVGEditor.Extensions
@using KristofferStrube.Blazor.SVGEditor;
@using Microsoft.AspNetCore.Components.Web;

@typeparam TNodeData where TNodeData : IEquatable<TNodeData>
@typeparam TEdgeData
@inherits ShapeEditor<Node<TNodeData, TEdgeData>>

<ContextMenuTrigger @key=@SVGElement.Id MenuId="SVGMenu" WrapperTag="g" Data=@SVGElement MouseButtonTrigger="SVGElement.ShouldTriggerContextMenu ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
    <g transform="translate(@SVGElement.SVG.Translate.x.AsString() @SVGElement.SVG.Translate.y.AsString()) scale(@SVGElement.SVG.Scale.AsString())">

        <circle @ref=ElementReference
                @onfocusin="FocusElement"
                @onfocusout="UnfocusElement"
                @onpointerdown="SelectAsync"
                @onkeyup="KeyUp"
                tabindex="@(SVGElement.IsChildElement ? -1 : 0)"
                cx=@SVGElement.Cx.AsString()
                cy=@SVGElement.Cy.AsString()
                r=@SVGElement.R.AsString()
                stroke="@SVGElement.Stroke"
                stroke-width="@((SVGElement.Selected ? 2 : 1))"
                stroke-linecap="@SVGElement.StrokeLinecap.AsString()"
                stroke-linejoin="@SVGElement.StrokeLinejoin.AsString()"
                stroke-dasharray="@SVGElement.StrokeDasharray"
                stroke-dashoffset="@SVGElement.StrokeDashoffset.AsString()"
                fill="@SVGElement.Fill"
                style="filter:brightness(@(SVGElement.Selected ? "0.8" : "1"))">
        </circle>
        @if (SVGElement.Image is not null)
        {
            <defs>
                <clipPath id="circle-@SVGElement.GraphEditor.NodeIdMapper(SVGElement.Data)">
                    <circle cx=@SVGElement.Cx.AsString()
                            cy=@SVGElement.Cy.AsString()
                            r=@((SVGElement.R - 1).AsString())>
                    </circle>
                </clipPath>
            </defs>
            <image x=@((SVGElement.Cx - SVGElement.R).AsString())
                   y=@((SVGElement.Cy - SVGElement.R).AsString())
                   width="@((SVGElement.R * 2 - 1).AsString())"
                   height="@((SVGElement.R * 2 - 1).AsString())"
                   clip-path="url(#circle-@SVGElement.GraphEditor.NodeIdMapper(SVGElement.Data))"
                   href="@SVGElement.Image"
                   style="pointer-events: none;">
            </image>
        }
    </g>
</ContextMenuTrigger>

@code {
    [CascadingParameter]
    public required GraphEditorCallbackContext CallbackContext { get; set; }

    public new async Task SelectAsync(MouseEventArgs eventArgs)
    {
        if (SVGElement.SVG.EditMode is EditMode.Add && SVGElement.SVG.SelectedShapes.Any(s => s is Edge<TNodeData, TEdgeData>))
        {
            SVGElement.SVG.SelectedShapes.Add(SVGElement);
        }
        else
        {
            await base.SelectAsync(eventArgs);
        }
        await CallbackContext.NodeSelectionCallback(SVGElement.Id!);
    }
}